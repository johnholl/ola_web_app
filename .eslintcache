[{"/home/john/ReactProjects/ola_web_app/src/index.tsx":"1","/home/john/ReactProjects/ola_web_app/src/reportWebVitals.ts":"2","/home/john/ReactProjects/ola_web_app/src/App.tsx":"3","/home/john/ReactProjects/ola_web_app/src/store/index.ts":"4","/home/john/ReactProjects/ola_web_app/src/components/Header/Header.tsx":"5","/home/john/ReactProjects/ola_web_app/src/components/Map/Map.tsx":"6","/home/john/ReactProjects/ola_web_app/src/components/Search/Search.tsx":"7","/home/john/ReactProjects/ola_web_app/src/components/Preview/Preview.tsx":"8","/home/john/ReactProjects/ola_web_app/src/components/Form/Form.tsx":"9","/home/john/ReactProjects/ola_web_app/src/components/Map/AddMarker.tsx":"10","/home/john/ReactProjects/ola_web_app/src/store/reducers/index.ts":"11","/home/john/ReactProjects/ola_web_app/src/store/actions/index.ts":"12","/home/john/ReactProjects/ola_web_app/src/store/reducers/places.ts":"13","/home/john/ReactProjects/ola_web_app/src/store/reducers/search.ts":"14","/home/john/ReactProjects/ola_web_app/src/store/actions/places.ts":"15","/home/john/ReactProjects/ola_web_app/src/store/actions/search.ts":"16","/home/john/ReactProjects/ola_web_app/src/firebase.tsx":"17","/home/john/ReactProjects/ola_web_app/src/store/models.ts":"18","/home/john/ReactProjects/ola_web_app/src/components/PublicPage.tsx":"19","/home/john/ReactProjects/ola_web_app/src/components/AdminPage.tsx":"20","/home/john/ReactProjects/ola_web_app/src/components/Login.tsx":"21","/home/john/ReactProjects/ola_web_app/src/components/AdminMap/Map.tsx":"22","/home/john/ReactProjects/ola_web_app/src/components/AdminPreview/Preview.tsx":"23","/home/john/ReactProjects/ola_web_app/src/components/AdminForm/Form.tsx":"24","/home/john/ReactProjects/ola_web_app/src/components/AdminMap/AddMarker.tsx":"25","/home/john/ReactProjects/ola_web_app/src/utils.tsx":"26","/home/john/ReactProjects/ola_web_app/src/providers/UserProvider.tsx":"27"},{"size":616,"mtime":1624586339107,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1624586339107,"results":"30","hashOfConfig":"29"},{"size":702,"mtime":1627666783868,"results":"31","hashOfConfig":"29"},{"size":225,"mtime":1624586339107,"results":"32","hashOfConfig":"29"},{"size":990,"mtime":1624586339103,"results":"33","hashOfConfig":"29"},{"size":5010,"mtime":1628376649440,"results":"34","hashOfConfig":"29"},{"size":1517,"mtime":1626899155781,"results":"35","hashOfConfig":"29"},{"size":1606,"mtime":1629134899782,"results":"36","hashOfConfig":"29"},{"size":7458,"mtime":1629134639315,"results":"37","hashOfConfig":"29"},{"size":1257,"mtime":1625177663262,"results":"38","hashOfConfig":"29"},{"size":156,"mtime":1624586339107,"results":"39","hashOfConfig":"29"},{"size":52,"mtime":1624586339107,"results":"40","hashOfConfig":"29"},{"size":1288,"mtime":1626899270263,"results":"41","hashOfConfig":"29"},{"size":460,"mtime":1624586339107,"results":"42","hashOfConfig":"29"},{"size":1090,"mtime":1624636756122,"results":"43","hashOfConfig":"29"},{"size":172,"mtime":1624586339107,"results":"44","hashOfConfig":"29"},{"size":598,"mtime":1626887197153,"results":"45","hashOfConfig":"29"},{"size":542,"mtime":1626794902665,"results":"46","hashOfConfig":"29"},{"size":346,"mtime":1627419580657,"results":"47","hashOfConfig":"29"},{"size":533,"mtime":1627261906585,"results":"48","hashOfConfig":"29"},{"size":2152,"mtime":1629383036221,"results":"49","hashOfConfig":"29"},{"size":6755,"mtime":1628914790122,"results":"50","hashOfConfig":"29"},{"size":2013,"mtime":1628785717008,"results":"51","hashOfConfig":"29"},{"size":4465,"mtime":1626830436722,"results":"52","hashOfConfig":"29"},{"size":1257,"mtime":1626830346314,"results":"53","hashOfConfig":"29"},{"size":344,"mtime":1626897791172,"results":"54","hashOfConfig":"29"},{"size":611,"mtime":1627836388927,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"qmqtun",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"58"},"/home/john/ReactProjects/ola_web_app/src/index.tsx",[],["117","118"],"/home/john/ReactProjects/ola_web_app/src/reportWebVitals.ts",[],"/home/john/ReactProjects/ola_web_app/src/App.tsx",[],"/home/john/ReactProjects/ola_web_app/src/store/index.ts",[],"/home/john/ReactProjects/ola_web_app/src/components/Header/Header.tsx",[],["119","120"],"/home/john/ReactProjects/ola_web_app/src/components/Map/Map.tsx",["121","122","123","124","125","126","127","128"],"import React, {useState, useEffect} from \"react\";\nimport { LatLngExpression, divIcon, MarkerCluster } from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, ZoomControl } from \"react-leaflet\";\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport {Collapse, Row, Col} from 'antd';\nimport { connect } from \"react-redux\";\nimport { setPlacePreviewVisibility, setSelectedPlace } from \"../../store/actions\";\nimport { IState, Place } from \"../../store/models\";\nimport AddMarker from \"./AddMarker\";\nimport {fstore} from \"../../firebase\";\n\nimport \"./Map.css\";\nimport makeid from \"../../utils\";\n\nconst {Panel} = Collapse;\n\nconst generateIcon = (num : number) => {\n  var numstr = \"\"\n  numstr = num >= 1000 ? String(Math.round(num/100)/10 + \"k\") : String(num)\n  const icon = divIcon({html: '<div class=\"circle\"><div class=\"circle__inner\">' + numstr + '</div></div>', className: 'empty'});\n  return icon;\n}\n\nconst generateClusterIcon = function (cluster: MarkerCluster) {\n  const markers = cluster.getAllChildMarkers();\n  let totalQuantity = 0\n  markers.map(marker=>{totalQuantity += Number(marker.options.title)})\n  const icon = generateIcon(totalQuantity);\n  return icon;\n}\n\n\nconst Map = ({\n  isVisible,\n  selectedPlace,\n  togglePreview,\n  setPlaceForPreview,\n}: any) => {\n  const defaultPosition: LatLngExpression = [14.6333308, -90.5499978]; // Guatemala City position\n\n  const [places, setPlaces] = useState([] as Place[]);\n\n  useEffect(() => {\n    (async function () {\n      const snapshot = await fstore.collection(\"publicplaces\").where(\"hide\", \"==\", false).get();\n      let plcs : Place[] = []\n      snapshot.forEach(doc => {\n        plcs.push(doc.data() as Place);\n      })\n      setPlaces(plcs);\n    })();\n}, []);\n\n  const showPreview = (place: Place) => {\n    if (isVisible) {\n      togglePreview(false);\n      setPlaceForPreview(null);\n    }\n\n    if (selectedPlace?.title !== place.title) {\n      setTimeout(() => {\n        showPlace(place);\n      }, 400);\n    }\n  };\n\n  const showPlace = (place: Place) => {\n    setPlaceForPreview(place);\n    togglePreview(true);\n  };\n  \n\n  return (\n    <div className=\"map__container\">\n      <MapContainer\n        minZoom={3}\n        center={defaultPosition}\n        zoom={7}\n        scrollWheelZoom={true}\n        style={{ height: \"100vh\" }}\n        zoomControl={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <ZoomControl position=\"bottomright\"/>\n        <MarkerClusterGroup iconCreateFunction={generateClusterIcon} showCoverageOnHover={false}>\n        {places.map((place: Place) => (\n          <Marker\n            icon={generateIcon(place.quantity)}\n            key={place.description}\n            position={place.position}\n            title={String(place.quantity)}\n            eventHandlers={{ click: () => showPreview(place) }}\n          >\n          </Marker>\n        ))}\n        </MarkerClusterGroup>\n        <AddMarker />\n      </MapContainer>\n      <a href=\"https://www.olafilter.com\">\n        <img src=\"namedlogo.png\" style={{zIndex: 1000, position:\"fixed\", top:10, left:10, width:100, borderRadius:10}}/>\n      </a>\n      {/* <img src=\"ola_banner2.png\" style={{zIndex: 1000, position:\"fixed\", bottom:10, left:10, width:\"40%\"}}/> */}\n      <Collapse\n      expandIconPosition=\"right\"\n      style={{zIndex: 1000, position:\"fixed\", bottom:10, left:10, borderRadius:\"15px\"}}\n    >\n      <Panel\n        header=\"Impact at a Glance\"\n        key=\"1\"\n      >\n        <div style={{width:180}}>\n          <Row className=\"impact-header\" justify=\"start\">Each Ola Filter</Row>\n          <Row justify=\"start\" align=\"middle\" style={{paddingTop:10}}><img src=\"tap.png\" style={{width:60}}/> <div style={{width:120}}>Benefits the whole family</div></Row>\n          <Row justify=\"start\" align=\"middle\" style={{paddingTop:10}}><img src=\"bank.png\" style={{width:60}}/> <div style={{width:120}}>Saves households hundreds of dollars</div></Row>\n          <Row justify=\"start\" align=\"middle\" style={{paddingTop:10}}><img src=\"worldhands.png\" style={{width:60}}/> <div style={{width:120}}>Replaces thousands of single-use plastic bottles</div></Row>\n          <Row justify=\"start\" align=\"middle\" style={{paddingTop:10}}><img src=\"farmer.png\" style={{width:60}}/> <div style={{width:120}}>Protects the health of families and the planet</div></Row>\n        </div>\n      </Panel>\n\n    </Collapse>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState) => {\n  const { places } = state;\n  return {\n    isVisible: places.placePreviewsIsVisible,\n    selectedPlace: places.selectedPlace,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    togglePreview: (payload: boolean) =>\n      dispatch(setPlacePreviewVisibility(payload)),\n    setPlaceForPreview: (payload: Place) =>\n      dispatch(setSelectedPlace(payload)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);\n","/home/john/ReactProjects/ola_web_app/src/components/Search/Search.tsx",[],"/home/john/ReactProjects/ola_web_app/src/components/Preview/Preview.tsx",[],"/home/john/ReactProjects/ola_web_app/src/components/Form/Form.tsx",["129","130"],"import { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { message, Upload, Button, Spin, Row, Tooltip} from \"antd\";\nimport { LoadingOutlined, UploadOutlined, InfoCircleOutlined} from '@ant-design/icons';\nimport { setPlaceFormVisibility } from \"../../store/actions\";\nimport { IState } from \"../../store/models\";\nimport { AiFillCloseCircle } from \"react-icons/ai\";\nimport \"./Form.css\";\nimport { Field, Formik, Form as FormikForm } from \"formik\";\nimport { LatLng } from \"leaflet\";\nimport { storage, functions } from \"../../firebase\";\nimport makeId from \"../../utils\";\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nconst addMarker = functions.httpsCallable(\"addMarker\"); \n\nconst Form = ({\n  isVisible,\n  position,\n  closeForm,\n}: {\n  isVisible: boolean;\n  position: LatLng;\n  closeForm: Function;\n}) => {\n\n  const [photoUrl, setPhotoUrl] = useState(false);\n  const [photoName, setPhotoName] = useState(\"\");\n  const [photoLoading, setPhotoLoading] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n\n  const initialValues = {\n    key: \"\",\n    title: \"\",\n    description: \"\",\n    quantity: \"\"\n  };\n\n  const validator = (values: PlaceFormProps) => {\n    const keys = Object.keys(values);\n    return keys.reduce((prev, curr) => {\n      if (!values[curr] && curr !=\"description\") {\n        return { ...prev, [curr]: \"required\" };\n      }\n      return prev;\n    }, {});\n  };\n\n  const handleOnSubmit = async (values: PlaceFormProps, {resetForm}:{resetForm: any}) => {\n    setSubmitting(true);\n    const result = await addMarker({photoUrl: photoUrl, \n      photoName: photoName,\n      key: values.key,\n      title: values.title, \n      description: values.description,\n      quantity: values.quantity,\n      position: position,\n      hide: false})\n    setPhotoUrl(false);\n    setPhotoName(\"\");\n    setSubmitting(false);\n    closeForm();\n    resetForm();\n  }\n\n    const customUpload = async (options : any) => {\n      const metadata = {\n          contentType: 'image/jpeg'\n      }\n      const storageRef = storage.ref();\n      const imageName = makeId(8); //a unique name for the image\n      const imgFile = storageRef.child(`${imageName}`);\n      try {\n        const image = await imgFile.put(options.file, metadata);\n        const url = await image.ref.getDownloadURL();\n        setPhotoUrl(url);\n        setPhotoName(imageName)\n        setPhotoLoading(false);\n        options.onSuccess(null, image);\n      } catch(e) {\n        options.onError(e);\n      }\n    };\n\n    const beforeUpload = (file: any) => {\n      const isImage = file.type.indexOf('image/') === 0;\n      if (!isImage) {\n        message.error('You can only upload image files');\n      }\n      \n      const isLt20M = file.size / 1024 / 1024 < 20;\n      if (!isLt20M) {\n        message.error('Image must smaller than 20MB');\n      }\n      return isImage && isLt20M;\n    };\n\n    const onChange = (info: any) => {\n      if (info.file.status === 'uploading') {\n        setPhotoLoading(true);\n        return;\n      }\n      if (info.file.status === 'done') {\n        setPhotoLoading(false);\n      };\n      }\n\n  return (\n    <div\n      className={`form__container form__container--${isVisible && \"active\"}`}\n    >\n      <div className=\"form__header\">\n        <span\n          className=\"form__header__close\"\n          role=\"button\"\n          onClick={() => closeForm()}\n        >\n          <AiFillCloseCircle />\n        </span>\n        <span className=\"form__header__title\">\n        <span>Add / Agregar</span>\n          <Tooltip title={`Be descriptive! Ola Filter will share and highlight your organization and your impact! ¡Sea descriptivo! ¡Ola Filter compartirá y destacará su organización y su impacto!`}>\n            <InfoCircleOutlined style={{paddingLeft:10}}/>\n          </Tooltip>\n        </span>\n      </div>\n      <Formik\n        initialValues={initialValues}\n        validate={(validator)}\n        onSubmit={handleOnSubmit}\n      >\n        {({ errors, touched, isValidating }) => (\n          <FormikForm>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"key\">Partner Key / Clave de Socio</label>\n                <Field id=\"key\" name=\"key\" placeholder=\"\" />\n              </div>\n              {errors.key && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"quantity\">Number of filters at this location / Cantidad de filtros distribuidos en este lugar</label>\n                <Field\n                  id=\"quantity\"\n                  name=\"quantity\"\n                  placeholder=\"\"\n                />\n              </div>\n              {errors.quantity && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"title\"> Title / Título</label>\n                <Field id=\"title\" name=\"title\" placeholder=\"\" />\n              </div>\n              {errors.title && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"description\">\n                  Tell us about your project / Cuéntanos de su proyecto\n                  <Tooltip title={`Share the purpose of your project, partner shoutouts, highlights or anecdotes.Comparta el propósito de su proyecto, comentarios de socios, momentos destacados o anécdotas.`}>\n                    <InfoCircleOutlined style={{paddingLeft:10}}/>\n                  </Tooltip>\n                  </label>\n                <Field\n                  id=\"description\"\n                  name=\"description\"\n                  placeholder=\"\"\n                />\n              </div>\n              {errors.description && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\" >\n                <label htmlFor=\"key\">Add Image / Añadir Imagen</label>\n                <Row align=\"middle\" justify=\"start\">\n                  <Upload onChange={onChange} \n                  beforeUpload={beforeUpload} \n                  customRequest={customUpload}>\n                    <Button icon={<UploadOutlined />}>\n                      {!photoLoading ? \"Add / Añadir\" : <Spin indicator={antIcon} style={{ paddingLeft: 10 }} />}\n                      </Button>\n                  </Upload>\n                </Row>\n              </div>\n            </div>\n            <div className=\"button__container\">\n              <button className=\"form__button\" type=\"submit\" style={{backgroundColor:\"#52b2bf\"}}>\n                {submitting ? <Spin indicator={antIcon} style={{ paddingLeft: 10 }} /> : \"Submit / Enviar\"}</button>\n            </div>\n          </FormikForm>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState) => {\n  const { places } = state;\n  return {\n    isVisible: places.placeFormIsVisible,\n    position: places.prePlacePosition as LatLng,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    closeForm: () =>\n      dispatch(setPlaceFormVisibility(false)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n\ninterface PlaceFormProps {\n  [key: string]: string;\n  title: string;\n  description: string;\n}\n","/home/john/ReactProjects/ola_web_app/src/components/Map/AddMarker.tsx",[],"/home/john/ReactProjects/ola_web_app/src/store/reducers/index.ts",[],"/home/john/ReactProjects/ola_web_app/src/store/actions/index.ts",[],"/home/john/ReactProjects/ola_web_app/src/store/reducers/places.ts",[],"/home/john/ReactProjects/ola_web_app/src/store/reducers/search.ts",[],"/home/john/ReactProjects/ola_web_app/src/store/actions/places.ts",[],"/home/john/ReactProjects/ola_web_app/src/store/actions/search.ts",[],"/home/john/ReactProjects/ola_web_app/src/firebase.tsx",[],"/home/john/ReactProjects/ola_web_app/src/store/models.ts",[],"/home/john/ReactProjects/ola_web_app/src/components/PublicPage.tsx",[],"/home/john/ReactProjects/ola_web_app/src/components/AdminPage.tsx",[],"/home/john/ReactProjects/ola_web_app/src/components/Login.tsx",["131"],"/home/john/ReactProjects/ola_web_app/src/components/AdminMap/Map.tsx",["132","133","134","135","136"],"import React, {useState, useEffect} from \"react\";\nimport { LatLngExpression, divIcon, MarkerCluster } from \"leaflet\";\nimport { Input, Button, InputNumber, Row, DatePicker, Collapse } from \"antd\";\nimport { MapContainer, TileLayer, Marker, ZoomControl } from \"react-leaflet\";\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport { connect } from \"react-redux\";\nimport { setPlacePreviewVisibility, setSelectedPlace } from \"../../store/actions\";\nimport { IState, Place } from \"../../store/models\";\nimport AddMarker from \"./AddMarker\";\nimport {fstore} from \"../../firebase\";\nimport { uuid } from 'uuidv4';\nimport { Moment } from 'moment'\nimport { EventValue } from 'rc-picker/lib/interface'\nimport \"./Map.css\";\nlet moment = require('moment');\n\nconst { RangePicker } = DatePicker;\nconst {Panel} = Collapse;\n\n\nconst generateIcon = (num : number) => {\n  var numstr = \"\"\n  numstr = num >= 1000 ? String(Math.round(num/100)/10 + \"k\") : String(num)\n  const icon = divIcon({html: '<div class=\"circle\"><div class=\"circle__inner\">' + numstr + '</div></div>', className: 'empty'});\n  return icon;\n}\n\nconst generateClusterIcon = function (cluster: MarkerCluster) {\n  const markers = cluster.getAllChildMarkers();\n  let totalQuantity = 0\n  markers.map(marker=>{totalQuantity += Number(marker.options.title)})\n  const icon = generateIcon(totalQuantity);\n  return icon;\n}\n\n\nconst Map = ({\n  isVisible,\n  selectedPlace,\n  togglePreview,\n  setPlaceForPreview,\n}: any) => {\n  const defaultPosition: LatLngExpression = [14.6333308, -90.5499978]; // Guatemala City position\n\n  const [places, setPlaces] = useState([] as Place[]);\n  const [filteredPlaces, setFilteredPlaces] = useState([] as Place[]);\n  const [filters, setFilters] = useState(0);\n  const [partners, setPartners] = useState(0);\n\n  const [minQFilt, setMinQFilt] = useState(0);\n  const [maxQFilt, setMaxQFilt] = useState(1000000);\n  const [partnerFilt, setPartnerFilt] = useState(\"\");\n  const initTimes: [Moment, Moment] = [moment('07/01/2021', 'MM/DD/YYYY'), moment()]\n  const [timeRange, setTimeRange] = useState(initTimes)\n\n\n\n\n  useEffect(() => {\n    (async function () {\n      const snapshot = await fstore.collection(\"publicplaces\").get();\n      let plcs : Place[] = []\n      let totfilt = 0;\n      let totpartners = 0;\n      let partners : any[] = []\n      snapshot.forEach(doc => {\n        plcs.push({...doc.data(), id: doc.id} as Place);\n        totfilt += parseInt(doc.data().quantity);\n        if(!partners.includes(doc.data().partnerName)){\n          partners.push(doc.data().partnerName);\n          totpartners += 1;\n        }\n      })\n      setPlaces(plcs);\n      setFilteredPlaces(plcs);\n      setFilters(totfilt);\n      setPartners(totpartners);\n    })();\n}, []);\n\n\n  const filter = () => {\n    console.log(\"filtering\");\n    console.log(partnerFilt);\n    console.log(minQFilt);\n    console.log(maxQFilt);\n    const fp = places.filter(place=>place.quantity <= maxQFilt &&\n                             place.quantity >= minQFilt && \n                             place.partnerName?.toUpperCase().includes(partnerFilt?.toUpperCase()) &&\n                             ((place.dt > timeRange[0].valueOf() && place.dt < timeRange[1].valueOf()) || !place.dt));\n    console.log(fp);\n    setFilteredPlaces(fp);\n  }\n\n  const resetFields = () => {\n    setMaxQFilt(1000000);\n    setMinQFilt(0);\n    setPartnerFilt(\"\");\n    console.log(places);\n    setFilteredPlaces(places);\n  }\n\n  const showPreview = (place: Place) => {\n    if (isVisible) {\n      togglePreview(false);\n      setPlaceForPreview(null);\n    }\n\n    if (selectedPlace?.title !== place.title) {\n      setTimeout(() => {\n        showPlace(place);\n      }, 400);\n    }\n  };\n\n  const showPlace = (place: Place) => {\n    setPlaceForPreview(place);\n    togglePreview(true);\n  };\n  \n\n  return (\n    <div className=\"map__container\">\n      <MapContainer\n        center={defaultPosition}\n        zoom={7}\n        scrollWheelZoom={true}\n        style={{ height: \"100vh\" }}\n        zoomControl={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <ZoomControl position=\"bottomright\"/>\n        <MarkerClusterGroup iconCreateFunction={generateClusterIcon} key={uuid()}>\n        {filteredPlaces.map((place: Place) => {\n          return(\n          <Marker\n            icon={generateIcon(place.quantity)}\n            key={place.id}\n            position={place.position}\n            title={String(place.quantity)}\n            eventHandlers={{ click: () => showPreview(place) }}\n          >\n          </Marker>\n        )})}\n        </MarkerClusterGroup>\n        <AddMarker />\n      </MapContainer>\n      <a href=\"https://www.olafilter.com\">\n      <img src=\"namedlogo.png\" style={{zIndex: 1000, position:\"fixed\", top:10, left:10, width:100, borderRadius:10}}/>\n      </a>\n      <Collapse>\n        <Panel style={{zIndex: 1000, position:\"fixed\", top:10, right:10, borderRadius:5, backgroundColor:\"white\", padding:10, font:\"bold 12px Helvetica, Verdana, Tahoma\", width:160, height:80}}\n        header=\"Search\" key={1}>\n          <Row align=\"middle\"><div style={{width:60}}>Partner: </div><Input style={{width:100}} value={partnerFilt} onChange={(e)=>setPartnerFilt(e.target.value)}/></Row>\n          <Row style={{paddingTop:5}}><div style={{width:60}}>Min: </div><InputNumber style={{width:100}} placeholder=\"Min Quantity\" value={minQFilt} onChange={(val)=>{const fixval = val ? parseInt(val.toString()) : 0;setMinQFilt(fixval)}}/></Row>\n          <Row style={{paddingTop:5}}><div style={{width:60}}>Max: </div><InputNumber style={{width:100}} placeholder=\"Max Quantity\" value={maxQFilt} onChange={(val)=>{const fixval = val ? parseInt(val.toString()) : 0;setMaxQFilt(fixval)}}/></Row>\n          <Row style={{paddingTop:5}}><div style={{width:60}}>Date: </div><RangePicker value={timeRange} onChange={(v) => {console.log(v);setTimeRange(v as [Moment, Moment])}}/></Row>\n          <Button type=\"primary\" onClick={filter} style={{paddingTop:5}}>Filter</Button>\n          <Button type=\"ghost\" onClick={resetFields} style={{paddingTop:5}}>Reset</Button>\n        </Panel>\n      </Collapse>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState) => {\n  const { places } = state;\n  return {\n    isVisible: places.placePreviewsIsVisible,\n    selectedPlace: places.selectedPlace,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    togglePreview: (payload: boolean) =>\n      dispatch(setPlacePreviewVisibility(payload)),\n    setPlaceForPreview: (payload: Place) =>\n      dispatch(setSelectedPlace(payload)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);\n","/home/john/ReactProjects/ola_web_app/src/components/AdminPreview/Preview.tsx",[],"/home/john/ReactProjects/ola_web_app/src/components/AdminForm/Form.tsx",["137"],"import { connect } from \"react-redux\";\nimport { setPlaceFormVisibility } from \"../../store/actions\";\nimport { IState } from \"../../store/models\";\nimport { AiFillCloseCircle } from \"react-icons/ai\";\nimport \"./Form.css\";\nimport { Field, Formik, Form as FormikForm } from \"formik\";\nimport { LatLng } from \"leaflet\";\nimport { fstore } from \"../../firebase\";\n\nconst Form = ({\n  isVisible,\n  position,\n  closeForm,\n}: {\n  isVisible: boolean;\n  position: LatLng;\n  closeForm: Function;\n}) => {\n\n\n  const initialValues = {\n    key: \"\",\n    picture: \"\",\n    title: \"\",\n    description: \"\",\n    quantity: \"\"\n  };\n\n  const validator = (values: PlaceFormProps) => {\n    const keys = Object.keys(values);\n\n    return keys.reduce((prev, curr) => {\n      if (!values[curr]) {\n        return { ...prev, [curr]: \"required\" };\n      }\n      console.log(prev)\n      return prev;\n    }, {});\n  };\n\n  const handleOnSubmit = (values: PlaceFormProps, {setSubmitting, resetForm}:{setSubmitting: any, resetForm: any}) => {\n    if(values.key==\"VALID\"){\n      fstore.collection(\"publicplaces\").add({\n        ...values,\n        position: [position.lat, position.lng]\n      })\n      closeForm();\n      resetForm();\n    }\n    else{\n      console.log(\"invalid distributor key\");\n      closeForm();\n      resetForm();\n    }\n  }\n\n  return (\n    <div\n      className={`form__container form__container--${isVisible && \"active\"}`}\n    >\n      <div className=\"form__header\">\n        <span\n          className=\"form__header__close\"\n          role=\"button\"\n          onClick={() => closeForm()}\n        >\n          <AiFillCloseCircle />\n        </span>\n        <span className=\"form__header__title\">AGREGAR / ADD </span>\n      </div>\n      <Formik\n        initialValues={initialValues}\n        validate={(validator)}\n        onSubmit={handleOnSubmit}\n      >\n        {({ errors, touched, isValidating }) => (\n          <FormikForm>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"key\">CLAVE DE SOCIO / PARTNER KEY</label>\n                <Field id=\"key\" name=\"key\" placeholder=\"\" />\n              </div>\n              {errors.key && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"picture\">SUBIR FOTO / UPLOAD PICTURE</label>\n                <Field id=\"picture\" name=\"picture\" placeholder=\"\" />\n              </div>\n              {errors.picture && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"title\"> TÍTULO / TITLE</label>\n                <Field id=\"title\" name=\"title\" placeholder=\"\" />\n              </div>\n              {errors.title && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"description\">DESCRIPCIÓN / DESCRIPTION</label>\n                <Field\n                  id=\"description\"\n                  name=\"description\"\n                  placeholder=\"\"\n                />\n              </div>\n              {errors.description && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"quantity\">CANTIDAD / QUANTITY</label>\n                <Field\n                  id=\"quantity\"\n                  name=\"quantity\"\n                  placeholder=\"\"\n                />\n              </div>\n              {errors.quantity && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"button__container\">\n              <button className=\"form__button\" type=\"submit\">ENVIAR / SUBMIT</button>\n            </div>\n          </FormikForm>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState) => {\n  const { places } = state;\n  return {\n    isVisible: places.placeFormIsVisible,\n    position: places.prePlacePosition as LatLng,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    closeForm: () =>\n      dispatch(setPlaceFormVisibility(false)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n\ninterface PlaceFormProps {\n  [key: string]: string;\n  picture: string;\n  title: string;\n  description: string;\n}\n","/home/john/ReactProjects/ola_web_app/src/components/AdminMap/AddMarker.tsx",[],"/home/john/ReactProjects/ola_web_app/src/utils.tsx",[],"/home/john/ReactProjects/ola_web_app/src/providers/UserProvider.tsx",["138","139","140","141"],"import React, {Component, createContext, useContext} from \"react\";\nimport {auth} from \"../firebase\"\n\n\nexport const UserContext = createContext({user: null});\nclass UserProvider extends Component {\n\n    state = {user: null};\n\n\n    componentDidMount() {\n        const {constants, posQuestions, fuQuestions} = this.context;\n        auth.onAuthStateChanged(userAuth => {\n            this.setState({user: userAuth});\n        });\n    }\n\n    render() {return(\n        <UserContext.Provider value={this.state}>\n            {this.props.children}\n        </UserContext.Provider>\n    )\n    }\n}\n\nexport default UserProvider",{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"142","replacedBy":"146"},{"ruleId":"144","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":5,"column":24,"nodeType":"150","messageId":"151","endLine":5,"endColumn":27},{"ruleId":"148","severity":1,"message":"152","line":13,"column":8,"nodeType":"150","messageId":"151","endLine":13,"endColumn":14},{"ruleId":"153","severity":1,"message":"154","line":27,"column":21,"nodeType":"155","messageId":"156","endLine":27,"endColumn":23},{"ruleId":"157","severity":1,"message":"158","line":103,"column":9,"nodeType":"159","endLine":103,"endColumn":121},{"ruleId":"157","severity":1,"message":"158","line":116,"column":71,"nodeType":"159","endLine":116,"endColumn":110},{"ruleId":"157","severity":1,"message":"158","line":117,"column":71,"nodeType":"159","endLine":117,"endColumn":111},{"ruleId":"157","severity":1,"message":"158","line":118,"column":71,"nodeType":"159","endLine":118,"endColumn":117},{"ruleId":"157","severity":1,"message":"158","line":119,"column":71,"nodeType":"159","endLine":119,"endColumn":113},{"ruleId":"160","severity":1,"message":"161","line":43,"column":33,"nodeType":"162","messageId":"163","endLine":43,"endColumn":35},{"ruleId":"148","severity":1,"message":"164","line":52,"column":11,"nodeType":"150","messageId":"151","endLine":52,"endColumn":17},{"ruleId":"157","severity":1,"message":"158","line":19,"column":17,"nodeType":"159","endLine":19,"endColumn":129},{"ruleId":"148","severity":1,"message":"165","line":13,"column":10,"nodeType":"150","messageId":"151","endLine":13,"endColumn":20},{"ruleId":"153","severity":1,"message":"154","line":31,"column":21,"nodeType":"155","messageId":"156","endLine":31,"endColumn":23},{"ruleId":"148","severity":1,"message":"166","line":47,"column":10,"nodeType":"150","messageId":"151","endLine":47,"endColumn":17},{"ruleId":"148","severity":1,"message":"167","line":48,"column":10,"nodeType":"150","messageId":"151","endLine":48,"endColumn":18},{"ruleId":"157","severity":1,"message":"158","line":152,"column":7,"nodeType":"159","endLine":152,"endColumn":119},{"ruleId":"160","severity":1,"message":"168","line":42,"column":18,"nodeType":"162","messageId":"163","endLine":42,"endColumn":20},{"ruleId":"148","severity":1,"message":"169","line":1,"column":42,"nodeType":"150","messageId":"151","endLine":1,"endColumn":52},{"ruleId":"148","severity":1,"message":"170","line":12,"column":16,"nodeType":"150","messageId":"151","endLine":12,"endColumn":25},{"ruleId":"148","severity":1,"message":"171","line":12,"column":27,"nodeType":"150","messageId":"151","endLine":12,"endColumn":39},{"ruleId":"148","severity":1,"message":"172","line":12,"column":41,"nodeType":"150","messageId":"151","endLine":12,"endColumn":52},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],["173"],["174"],"@typescript-eslint/no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'makeid' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'result' is assigned a value but never used.","'EventValue' is defined but never used.","'filters' is assigned a value but never used.","'partners' is assigned a value but never used.","Expected '===' and instead saw '=='.","'useContext' is defined but never used.","'constants' is assigned a value but never used.","'posQuestions' is assigned a value but never used.","'fuQuestions' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]