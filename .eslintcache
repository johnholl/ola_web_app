[{"/home/john/ReactProjects/ola_web_app/src/index.tsx":"1","/home/john/ReactProjects/ola_web_app/src/reportWebVitals.ts":"2","/home/john/ReactProjects/ola_web_app/src/App.tsx":"3","/home/john/ReactProjects/ola_web_app/src/store/index.ts":"4","/home/john/ReactProjects/ola_web_app/src/components/Header/Header.tsx":"5","/home/john/ReactProjects/ola_web_app/src/components/Map/Map.tsx":"6","/home/john/ReactProjects/ola_web_app/src/components/Search/Search.tsx":"7","/home/john/ReactProjects/ola_web_app/src/components/Preview/Preview.tsx":"8","/home/john/ReactProjects/ola_web_app/src/components/Form/Form.tsx":"9","/home/john/ReactProjects/ola_web_app/src/components/Map/AddMarker.tsx":"10","/home/john/ReactProjects/ola_web_app/src/store/reducers/index.ts":"11","/home/john/ReactProjects/ola_web_app/src/store/actions/index.ts":"12","/home/john/ReactProjects/ola_web_app/src/store/reducers/places.ts":"13","/home/john/ReactProjects/ola_web_app/src/store/reducers/search.ts":"14","/home/john/ReactProjects/ola_web_app/src/store/actions/places.ts":"15","/home/john/ReactProjects/ola_web_app/src/store/actions/search.ts":"16","/home/john/ReactProjects/ola_web_app/src/firebase.tsx":"17","/home/john/ReactProjects/ola_web_app/src/store/models.ts":"18","/home/john/ReactProjects/ola_web_app/src/components/PublicPage.tsx":"19","/home/john/ReactProjects/ola_web_app/src/components/AdminPage.tsx":"20","/home/john/ReactProjects/ola_web_app/src/components/Login.tsx":"21","/home/john/ReactProjects/ola_web_app/src/components/AdminMap/Map.tsx":"22","/home/john/ReactProjects/ola_web_app/src/components/AdminPreview/Preview.tsx":"23","/home/john/ReactProjects/ola_web_app/src/components/AdminForm/Form.tsx":"24","/home/john/ReactProjects/ola_web_app/src/components/AdminMap/AddMarker.tsx":"25","/home/john/ReactProjects/ola_web_app/src/utils.tsx":"26","/home/john/ReactProjects/ola_web_app/src/providers/UserProvider.tsx":"27"},{"size":616,"mtime":1624586339107,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1624586339107,"results":"30","hashOfConfig":"29"},{"size":717,"mtime":1627325173625,"results":"31","hashOfConfig":"29"},{"size":225,"mtime":1624586339107,"results":"32","hashOfConfig":"29"},{"size":990,"mtime":1624586339103,"results":"33","hashOfConfig":"29"},{"size":3572,"mtime":1627221032571,"results":"34","hashOfConfig":"29"},{"size":1517,"mtime":1626899155781,"results":"35","hashOfConfig":"29"},{"size":1444,"mtime":1627264219750,"results":"36","hashOfConfig":"29"},{"size":6667,"mtime":1627068662395,"results":"37","hashOfConfig":"29"},{"size":1257,"mtime":1625177663262,"results":"38","hashOfConfig":"29"},{"size":156,"mtime":1624586339107,"results":"39","hashOfConfig":"29"},{"size":52,"mtime":1624586339107,"results":"40","hashOfConfig":"29"},{"size":1288,"mtime":1626899270263,"results":"41","hashOfConfig":"29"},{"size":460,"mtime":1624586339107,"results":"42","hashOfConfig":"29"},{"size":1090,"mtime":1624636756122,"results":"43","hashOfConfig":"29"},{"size":172,"mtime":1624586339107,"results":"44","hashOfConfig":"29"},{"size":598,"mtime":1626887197153,"results":"45","hashOfConfig":"29"},{"size":542,"mtime":1626794902665,"results":"46","hashOfConfig":"29"},{"size":406,"mtime":1626899105862,"results":"47","hashOfConfig":"29"},{"size":533,"mtime":1627261906585,"results":"48","hashOfConfig":"29"},{"size":2097,"mtime":1626833530312,"results":"49","hashOfConfig":"29"},{"size":3562,"mtime":1627263599214,"results":"50","hashOfConfig":"29"},{"size":1977,"mtime":1627265151044,"results":"51","hashOfConfig":"29"},{"size":4465,"mtime":1626830436722,"results":"52","hashOfConfig":"29"},{"size":1257,"mtime":1626830346314,"results":"53","hashOfConfig":"29"},{"size":344,"mtime":1626897791172,"results":"54","hashOfConfig":"29"},{"size":611,"mtime":1627261256245,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"qmqtun",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"58"},"/home/john/ReactProjects/ola_web_app/src/index.tsx",[],["117","118"],"/home/john/ReactProjects/ola_web_app/src/reportWebVitals.ts",[],"/home/john/ReactProjects/ola_web_app/src/App.tsx",["119"],"/home/john/ReactProjects/ola_web_app/src/store/index.ts",[],"/home/john/ReactProjects/ola_web_app/src/components/Header/Header.tsx",[],["120","121"],"/home/john/ReactProjects/ola_web_app/src/components/Map/Map.tsx",["122","123"],"import React, {useState, useEffect} from \"react\";\nimport { LatLngExpression, divIcon, MarkerCluster } from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, ZoomControl } from \"react-leaflet\";\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport { connect } from \"react-redux\";\nimport { setPlacePreviewVisibility, setSelectedPlace } from \"../../store/actions\";\nimport { IState, Place } from \"../../store/models\";\nimport AddMarker from \"./AddMarker\";\nimport {fstore} from \"../../firebase\";\n\nimport \"./Map.css\";\n\n\nconst generateIcon = (num : number) => {\n  var numstr = \"\"\n  numstr = num >= 1000 ? String(Math.round(num/100)/10 + \"k\") : String(num)\n  const icon = divIcon({html: '<div class=\"circle\">' + numstr + '</div>', className: 'empty'});\n  return icon;\n}\n\nconst generateClusterIcon = function (cluster: MarkerCluster) {\n  const markers = cluster.getAllChildMarkers();\n  let totalQuantity = 0\n  markers.map(marker=>{totalQuantity += Number(marker.options.title)})\n  const icon = generateIcon(totalQuantity);\n  return icon;\n}\n\n\nconst Map = ({\n  isVisible,\n  selectedPlace,\n  togglePreview,\n  setPlaceForPreview,\n}: any) => {\n  const defaultPosition: LatLngExpression = [14.6333308, -90.5499978]; // Guatemala City position\n\n  const [places, setPlaces] = useState([] as Place[]);\n\n  useEffect(() => {\n    (async function () {\n      const snapshot = await fstore.collection(\"publicplaces\").where(\"hide\", \"==\", false).get();\n      let plcs : Place[] = []\n      snapshot.forEach(doc => {\n        plcs.push(doc.data() as Place);\n      })\n      setPlaces(plcs);\n    })();\n}, []);\n\n  const showPreview = (place: Place) => {\n    if (isVisible) {\n      togglePreview(false);\n      setPlaceForPreview(null);\n    }\n\n    if (selectedPlace?.title !== place.title) {\n      setTimeout(() => {\n        showPlace(place);\n      }, 400);\n    }\n  };\n\n  const showPlace = (place: Place) => {\n    setPlaceForPreview(place);\n    togglePreview(true);\n  };\n  \n\n  return (\n    <div className=\"map__container\">\n      <MapContainer\n        center={defaultPosition}\n        zoom={7}\n        scrollWheelZoom={true}\n        style={{ height: \"100vh\" }}\n        zoomControl={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <ZoomControl position=\"bottomright\"/>\n        <MarkerClusterGroup iconCreateFunction={generateClusterIcon}>\n        {places.map((place: Place) => (\n          <Marker\n            icon={generateIcon(place.quantity)}\n            key={place.quantity}\n            position={place.position}\n            title={String(place.quantity)}\n            eventHandlers={{ click: () => showPreview(place) }}\n          >\n          </Marker>\n        ))}\n        </MarkerClusterGroup>\n        <AddMarker />\n      </MapContainer>\n      <a href=\"https://www.olafilter.com\">\n      <img src=\"namedlogo.png\" style={{zIndex: 1000, position:\"fixed\", top:10, left:10, width:100, borderRadius:10}}/>\n      </a>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState) => {\n  const { places } = state;\n  return {\n    isVisible: places.placePreviewsIsVisible,\n    selectedPlace: places.selectedPlace,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    togglePreview: (payload: boolean) =>\n      dispatch(setPlacePreviewVisibility(payload)),\n    setPlaceForPreview: (payload: Place) =>\n      dispatch(setSelectedPlace(payload)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);\n","/home/john/ReactProjects/ola_web_app/src/components/Search/Search.tsx",[],"/home/john/ReactProjects/ola_web_app/src/components/Preview/Preview.tsx",[],"/home/john/ReactProjects/ola_web_app/src/components/Form/Form.tsx",[],"/home/john/ReactProjects/ola_web_app/src/components/Map/AddMarker.tsx",[],"/home/john/ReactProjects/ola_web_app/src/store/reducers/index.ts",[],"/home/john/ReactProjects/ola_web_app/src/store/actions/index.ts",[],"/home/john/ReactProjects/ola_web_app/src/store/reducers/places.ts",[],"/home/john/ReactProjects/ola_web_app/src/store/reducers/search.ts",[],"/home/john/ReactProjects/ola_web_app/src/store/actions/places.ts",[],"/home/john/ReactProjects/ola_web_app/src/store/actions/search.ts",[],"/home/john/ReactProjects/ola_web_app/src/firebase.tsx",[],"/home/john/ReactProjects/ola_web_app/src/store/models.ts",[],"/home/john/ReactProjects/ola_web_app/src/components/PublicPage.tsx",[],"/home/john/ReactProjects/ola_web_app/src/components/AdminPage.tsx",[],"/home/john/ReactProjects/ola_web_app/src/components/Login.tsx",["124","125"],"import React, {useState} from 'react';\nimport {Form, Button, Input, Row, Col} from 'antd';\nimport {auth} from \"../firebase\";\n\nexport default function LoginScreen(props: any) {\n    let [errorMessage, setErrorMessage] = useState(null);\n\n    const handleLogin = (values: any) => {\n        auth.signInWithEmailAndPassword(values.email, values.password)\n            .then(() => props.history.push('/Admin'))\n            .catch(error => setErrorMessage(error.message))\n    };\n\n\n\n        return (\n            <>\n            <a href=\"https://www.olafilter.com\">\n                <img src=\"namedlogo.png\" style={{zIndex: 1000, position:\"fixed\", top:10, left:10, width:100, borderRadius:20}}/>\n            </a>\n            <Row justify=\"center\" style={{paddingTop:50}}>\n                <Col>\n                    <Form\n                        name=\"basic\"\n                        labelCol={{ span: 8 }}\n                        wrapperCol={{ span: 16 }}\n                        initialValues={{ remember: true }}\n                        onFinish={handleLogin}\n                        onFinishFailed={()=>console.log(\"Login Failed\")}\n                    >\n                        <Form.Item\n                        label=\"Email\"\n                        name=\"email\"\n                        rules={[{ required: true, message: 'required' }]}\n                        >\n                        <Input />\n                        </Form.Item>\n                \n                        <Form.Item\n                        label=\"Password\"\n                        name=\"password\"\n                        rules={[{ required: true, message: 'required' }]}\n                        >\n                        <Input.Password />\n                        </Form.Item>\n                \n                        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                        </Form.Item>\n                    </Form>\n                </Col>\n            </Row>\n            </>\n\n        )\n}\n","/home/john/ReactProjects/ola_web_app/src/components/AdminMap/Map.tsx",["126","127"],"import React, {useState, useEffect} from \"react\";\nimport { LatLngExpression, divIcon, MarkerCluster } from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, ZoomControl } from \"react-leaflet\";\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport { connect } from \"react-redux\";\nimport { setPlacePreviewVisibility, setSelectedPlace } from \"../../store/actions\";\nimport { IState, Place } from \"../../store/models\";\nimport AddMarker from \"./AddMarker\";\nimport {fstore} from \"../../firebase\";\n\nimport \"./Map.css\";\n\n\nconst generateIcon = (num : number) => {\n  var numstr = \"\"\n  numstr = num >= 1000 ? String(Math.round(num/100)/10 + \"k\") : String(num)\n  const icon = divIcon({html: '<div class=\"circle\">' + numstr + '</div>', className: 'empty'});\n  return icon;\n}\n\nconst generateClusterIcon = function (cluster: MarkerCluster) {\n  const markers = cluster.getAllChildMarkers();\n  let totalQuantity = 0\n  markers.map(marker=>{totalQuantity += Number(marker.options.title)})\n  const icon = generateIcon(totalQuantity);\n  return icon;\n}\n\n\nconst Map = ({\n  isVisible,\n  selectedPlace,\n  togglePreview,\n  setPlaceForPreview,\n}: any) => {\n  const defaultPosition: LatLngExpression = [14.6333308, -90.5499978]; // Guatemala City position\n\n  const [places, setPlaces] = useState([] as Place[]);\n\n  useEffect(() => {\n    (async function () {\n      const snapshot = await fstore.collection(\"publicplaces\").get();\n      let plcs : Place[] = []\n      snapshot.forEach(doc => {\n        plcs.push({...doc.data(), id: doc.id} as Place);\n      })\n      setPlaces(plcs);\n    })();\n}, []);\n\n  const showPreview = (place: Place) => {\n    if (isVisible) {\n      togglePreview(false);\n      setPlaceForPreview(null);\n    }\n\n    if (selectedPlace?.title !== place.title) {\n      setTimeout(() => {\n        showPlace(place);\n      }, 400);\n    }\n  };\n\n  const showPlace = (place: Place) => {\n    setPlaceForPreview(place);\n    togglePreview(true);\n  };\n  \n\n  return (\n    <div className=\"map__container\">\n      <MapContainer\n        center={defaultPosition}\n        zoom={7}\n        scrollWheelZoom={true}\n        style={{ height: \"100vh\" }}\n        zoomControl={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <ZoomControl position=\"bottomright\"/>\n        <MarkerClusterGroup iconCreateFunction={generateClusterIcon}>\n        {places.map((place: Place) => (\n          <Marker\n            icon={generateIcon(place.quantity)}\n            key={place.quantity}\n            position={place.position}\n            title={String(place.quantity)}\n            eventHandlers={{ click: () => showPreview(place) }}\n          >\n          </Marker>\n        ))}\n        </MarkerClusterGroup>\n        <AddMarker />\n      </MapContainer>\n      <a href=\"https://www.olafilter.com\">\n      <img src=\"namedlogo.png\" style={{zIndex: 1000, position:\"fixed\", top:10, left:10, width:100, borderRadius:10}}/>\n      </a>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState) => {\n  const { places } = state;\n  return {\n    isVisible: places.placePreviewsIsVisible,\n    selectedPlace: places.selectedPlace,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    togglePreview: (payload: boolean) =>\n      dispatch(setPlacePreviewVisibility(payload)),\n    setPlaceForPreview: (payload: Place) =>\n      dispatch(setSelectedPlace(payload)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);\n","/home/john/ReactProjects/ola_web_app/src/components/AdminPreview/Preview.tsx",[],"/home/john/ReactProjects/ola_web_app/src/components/AdminForm/Form.tsx",["128"],"import { connect } from \"react-redux\";\nimport { setPlaceFormVisibility } from \"../../store/actions\";\nimport { IState } from \"../../store/models\";\nimport { AiFillCloseCircle } from \"react-icons/ai\";\nimport \"./Form.css\";\nimport { Field, Formik, Form as FormikForm } from \"formik\";\nimport { LatLng } from \"leaflet\";\nimport { fstore } from \"../../firebase\";\n\nconst Form = ({\n  isVisible,\n  position,\n  closeForm,\n}: {\n  isVisible: boolean;\n  position: LatLng;\n  closeForm: Function;\n}) => {\n\n\n  const initialValues = {\n    key: \"\",\n    picture: \"\",\n    title: \"\",\n    description: \"\",\n    quantity: \"\"\n  };\n\n  const validator = (values: PlaceFormProps) => {\n    const keys = Object.keys(values);\n\n    return keys.reduce((prev, curr) => {\n      if (!values[curr]) {\n        return { ...prev, [curr]: \"required\" };\n      }\n      console.log(prev)\n      return prev;\n    }, {});\n  };\n\n  const handleOnSubmit = (values: PlaceFormProps, {setSubmitting, resetForm}:{setSubmitting: any, resetForm: any}) => {\n    if(values.key==\"VALID\"){\n      fstore.collection(\"publicplaces\").add({\n        ...values,\n        position: [position.lat, position.lng]\n      })\n      closeForm();\n      resetForm();\n    }\n    else{\n      console.log(\"invalid distributor key\");\n      closeForm();\n      resetForm();\n    }\n  }\n\n  return (\n    <div\n      className={`form__container form__container--${isVisible && \"active\"}`}\n    >\n      <div className=\"form__header\">\n        <span\n          className=\"form__header__close\"\n          role=\"button\"\n          onClick={() => closeForm()}\n        >\n          <AiFillCloseCircle />\n        </span>\n        <span className=\"form__header__title\">AGREGAR / ADD </span>\n      </div>\n      <Formik\n        initialValues={initialValues}\n        validate={(validator)}\n        onSubmit={handleOnSubmit}\n      >\n        {({ errors, touched, isValidating }) => (\n          <FormikForm>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"key\">CLAVE DE SOCIO / PARTNER KEY</label>\n                <Field id=\"key\" name=\"key\" placeholder=\"\" />\n              </div>\n              {errors.key && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"picture\">SUBIR FOTO / UPLOAD PICTURE</label>\n                <Field id=\"picture\" name=\"picture\" placeholder=\"\" />\n              </div>\n              {errors.picture && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"title\"> TÍTULO / TITLE</label>\n                <Field id=\"title\" name=\"title\" placeholder=\"\" />\n              </div>\n              {errors.title && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"description\">DESCRIPCIÓN / DESCRIPTION</label>\n                <Field\n                  id=\"description\"\n                  name=\"description\"\n                  placeholder=\"\"\n                />\n              </div>\n              {errors.description && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"formGroup\">\n              <div className=\"formGroupInput\">\n                <label htmlFor=\"quantity\">CANTIDAD / QUANTITY</label>\n                <Field\n                  id=\"quantity\"\n                  name=\"quantity\"\n                  placeholder=\"\"\n                />\n              </div>\n              {errors.quantity && <div className=\"errors\">Required</div>}\n            </div>\n            <div className=\"button__container\">\n              <button className=\"form__button\" type=\"submit\">ENVIAR / SUBMIT</button>\n            </div>\n          </FormikForm>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState) => {\n  const { places } = state;\n  return {\n    isVisible: places.placeFormIsVisible,\n    position: places.prePlacePosition as LatLng,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    closeForm: () =>\n      dispatch(setPlaceFormVisibility(false)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n\ninterface PlaceFormProps {\n  [key: string]: string;\n  picture: string;\n  title: string;\n  description: string;\n}\n","/home/john/ReactProjects/ola_web_app/src/components/AdminMap/AddMarker.tsx",[],"/home/john/ReactProjects/ola_web_app/src/utils.tsx",[],"/home/john/ReactProjects/ola_web_app/src/providers/UserProvider.tsx",["129","130","131","132"],"import React, {Component, createContext, useContext} from \"react\";\nimport {auth} from \"../firebase\"\n\n\nexport const UserContext = createContext({user: null});\nclass UserProvider extends Component {\n\n    state = {user: null};\n\n\n    componentDidMount() {\n        const {constants, posQuestions, fuQuestions} = this.context;\n        auth.onAuthStateChanged(userAuth => {\n            this.setState({user: userAuth});\n        });\n    }\n\n    render() {return(\n        <UserContext.Provider value={this.state}>\n            {this.props.children}\n        </UserContext.Provider>\n    )\n    }\n}\n\nexport default UserProvider",{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":9,"column":23,"nodeType":"139","messageId":"140","endLine":9,"endColumn":34},{"ruleId":"133","replacedBy":"141"},{"ruleId":"135","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":24,"column":21,"nodeType":"145","messageId":"146","endLine":24,"endColumn":23},{"ruleId":"147","severity":1,"message":"148","line":99,"column":7,"nodeType":"149","endLine":99,"endColumn":119},{"ruleId":"137","severity":1,"message":"150","line":6,"column":10,"nodeType":"139","messageId":"140","endLine":6,"endColumn":22},{"ruleId":"147","severity":1,"message":"148","line":19,"column":17,"nodeType":"149","endLine":19,"endColumn":129},{"ruleId":"143","severity":1,"message":"144","line":24,"column":21,"nodeType":"145","messageId":"146","endLine":24,"endColumn":23},{"ruleId":"147","severity":1,"message":"148","line":99,"column":7,"nodeType":"149","endLine":99,"endColumn":119},{"ruleId":"151","severity":1,"message":"152","line":42,"column":18,"nodeType":"153","messageId":"154","endLine":42,"endColumn":20},{"ruleId":"137","severity":1,"message":"155","line":1,"column":42,"nodeType":"139","messageId":"140","endLine":1,"endColumn":52},{"ruleId":"137","severity":1,"message":"156","line":12,"column":16,"nodeType":"139","messageId":"140","endLine":12,"endColumn":25},{"ruleId":"137","severity":1,"message":"157","line":12,"column":27,"nodeType":"139","messageId":"140","endLine":12,"endColumn":39},{"ruleId":"137","severity":1,"message":"158","line":12,"column":41,"nodeType":"139","messageId":"140","endLine":12,"endColumn":52},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"@typescript-eslint/no-unused-vars","'UserContext' is defined but never used.","Identifier","unusedVar",["159"],["160"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'errorMessage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useContext' is defined but never used.","'constants' is assigned a value but never used.","'posQuestions' is assigned a value but never used.","'fuQuestions' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]